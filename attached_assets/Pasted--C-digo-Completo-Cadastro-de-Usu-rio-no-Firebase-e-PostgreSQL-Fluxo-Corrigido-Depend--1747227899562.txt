// 🚀 Código Completo - Cadastro de Usuário no Firebase e PostgreSQL (Fluxo Corrigido)

// Dependências Necessárias
const express = require('express');
const bodyParser = require('body-parser');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const { initializeApp } = require('firebase-admin/app');
const { getAuth } = require('firebase-admin/auth');
const { Pool } = require('pg');

// Configuração Firebase
initializeApp({
  credential: admin.credential.cert(JSON.parse(process.env.FIREBASE_ADMIN_CREDENTIALS))
});

// Configuração PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

// Configuração do Express
const app = express();
app.use(bodyParser.json());

// Endpoint Webhook do Stripe
app.post('/api/stripe-webhook', async (req, res) => {
  const sig = req.headers['stripe-signature'];

  try {
    const event = stripe.webhooks.constructEvent(
      req.body,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET
    );

    if (event.type === 'checkout.session.completed') {
      const session = event.data.object;
      const email = session.customer_email;

      // Verifica se o usuário existe no PostgreSQL
      const user = await pool.query('SELECT * FROM users WHERE email = $1', [email]);

      if (user.rows.length > 0 && user.rows[0].status === 'pendente') {
        // Cria o usuário no Firebase apenas após o pagamento
        await getAuth().createUser({
          email: email,
          password: user.rows[0].senha_hash
        });

        // Atualiza o status do usuário no PostgreSQL para ativo
        await pool.query(
          'UPDATE users SET status = $1 WHERE email = $2',
          ['ativo', email]
        );

        console.log(`✅ Usuário ${email} registrado no Firebase e ativado no PostgreSQL!`);
      }
    }

    res.status(200).send('Webhook recebido com sucesso.');
  } catch (err) {
    console.error('❌ Erro no Webhook:', err);
    res.status(400).send(`Webhook Error: ${err.message}`);
  }
});

// Iniciar o servidor
app.listen(3000, () => {
  console.log('🚀 Servidor rodando na porta 3000');
});
