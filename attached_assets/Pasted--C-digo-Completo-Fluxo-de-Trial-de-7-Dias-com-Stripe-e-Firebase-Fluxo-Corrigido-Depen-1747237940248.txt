// 🚀 Código Completo - Fluxo de Trial de 7 Dias com Stripe e Firebase (Fluxo Corrigido)

// Dependências Necessárias
const express = require('express');
const bodyParser = require('body-parser');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const { initializeApp } = require('firebase-admin/app');
const { getAuth } = require('firebase-admin/auth');
const { Pool } = require('pg');

// Configuração Firebase
initializeApp({
  credential: admin.credential.cert(JSON.parse(process.env.FIREBASE_ADMIN_CREDENTIALS))
});

// Configuração PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

// Configuração do Express
const app = express();
app.use(bodyParser.json());

// Endpoint para Criar Sessão de Checkout com Trial
app.post('/api/checkout', async (req, res) => {
  const { email, plan } = req.body;

  try {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      mode: 'subscription',
      line_items: [
        {
          price: plan,
          quantity: 1
        }
      ],
      subscription_data: {
        trial_period_days: 7
      },
      customer_email: email,
      success_url: 'https://seu-site.com/sucesso',
      cancel_url: 'https://seu-site.com/cancelamento',
    });

    res.status(200).json({ url: session.url });
  } catch (err) {
    console.error('❌ Erro ao criar sessão de checkout:', err);
    res.status(400).send('Erro ao criar sessão de checkout');
  }
});

// Endpoint Webhook do Stripe
app.post('/api/stripe-webhook', async (req, res) => {
  const sig = req.headers['stripe-signature'];

  try {
    const event = stripe.webhooks.constructEvent(
      req.body,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET
    );

    if (event.type === 'checkout.session.completed') {
      const session = event.data.object;
      const email = session.customer_email;

      // Verifica e cria o usuário no Firebase imediatamente
      await getAuth().createUser({ email, password: 'SenhaInicial' });
      await pool.query('UPDATE users SET status = $1 WHERE email = $2', ['ativo', email]);

      console.log(`✅ Usuário ${email} registrado no Firebase com acesso imediato!`);
    }

    if (event.type === 'invoice.payment_succeeded') {
      console.log(`✅ Pagamento confirmado após trial para: ${event.data.object.customer_email}`);
    }

    if (event.type === 'invoice.payment_failed') {
      console.log(`❌ Pagamento falhou após trial para: ${event.data.object.customer_email}`);
      await getAuth().deleteUserByEmail(event.data.object.customer_email);
    }

    res.status(200).send('Webhook recebido com sucesso.');
  } catch (err) {
    console.error('❌ Erro no Webhook:', err);
    res.status(400).send(`Webhook Error: ${err.message}`);
  }
});

// Iniciar o servidor
app.listen(3000, () => {
  console.log('🚀 Servidor rodando na porta 3000');
});
