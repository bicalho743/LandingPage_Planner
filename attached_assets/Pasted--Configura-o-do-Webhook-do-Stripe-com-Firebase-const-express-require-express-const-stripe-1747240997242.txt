// Configuração do Webhook do Stripe com Firebase
const express = require('express');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const admin = require('firebase-admin');
const bodyParser = require('body-parser');
const app = express();

// Configuração do Firebase (Certifique-se que o Firebase já está inicializado)
if (!admin.apps.length) {
    admin.initializeApp({
        credential: admin.credential.applicationDefault()
    });
}

// Usar bodyParser para JSON
app.use(bodyParser.json({
    verify: (req, res, buf) => {
        req.rawBody = buf.toString();
    }
}));

// Rota do Webhook do Stripe
app.post('/api/stripe-webhook', async (req, res) => {
    const sig = req.headers['stripe-signature'];
    let event;

    try {
        event = stripe.webhooks.constructEvent(
            req.rawBody, // Garantir que o rawBody está configurado
            sig,
            process.env.STRIPE_WEBHOOK_SECRET
        );
        console.log("✅ Webhook Recebido:", event.type);
    } catch (err) {
        console.error('❌ Erro de verificação do webhook:', err.message);
        return res.status(400).send(`Webhook Error: ${err.message}`);
    }

    // Verificação dos eventos recebidos
    switch (event.type) {
        case 'checkout.session.completed':
            await handleCheckoutSessionCompleted(event.data.object);
            break;
        case 'customer.created':
            console.log("✅ Novo cliente criado:", event.data.object.email);
            break;
        case 'customer.updated':
            console.log("✅ Cliente atualizado:", event.data.object.email);
            break;
        case 'customer.subscription.created':
            console.log("✅ Nova assinatura criada para:", event.data.object.customer);
            break;
        case 'invoice.paid':
            console.log("✅ Fatura paga:", event.data.object.customer_email);
            break;
        case 'invoice.payment_succeeded':
            console.log("✅ Pagamento bem-sucedido:", event.data.object.customer_email);
            break;
        default:
            console.log(`⚠️ Evento não tratado: ${event.type}`);
    }

    res.status(200).send('Webhook recebido com sucesso');
});

// Função para tratar o checkout.session.completed
async function handleCheckoutSessionCompleted(session) {
    const userEmail = session.customer_email;
    const userName = session.customer_details.name || userEmail.split('@')[0];
    const userPasswordBase64 = session.metadata ? session.metadata.senha : null;
    const userPassword = userPasswordBase64 ? Buffer.from(userPasswordBase64, 'base64').toString('utf-8') : null;
    const userId = session.metadata ? session.metadata.userId : null;

    console.log('✅ Sessão de checkout concluída:', {
        userEmail,
        userName,
        userPassword,
        userId
    });

    if (!userEmail || !userPassword) {
        console.error('❌ Dados do usuário incompletos. E-mail ou senha ausentes.');
        return;
    }

    try {
        // Verificar se o usuário já existe no Firebase
        const userRecord = await admin.auth().getUserByEmail(userEmail).catch(() => null);
        
        if (!userRecord) {
            // Criar o usuário no Firebase
            const newUser = await admin.auth().createUser({
                uid: userId || undefined,
                email: userEmail,
                emailVerified: true,
                password: userPassword,
                displayName: userName
            });
            console.log('✅ Usuário criado no Firebase:', newUser.uid);
        } else {
            console.log('✅ Usuário já existente no Firebase:', userEmail);
        }
    } catch (err) {
        console.error('❌ Erro ao criar usuário no Firebase:', err.message);
    }
}

// Iniciar o servidor (apenas se estiver rodando como standalone)
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`🚀 Webhook do Stripe rodando na porta ${PORT}`);
});
