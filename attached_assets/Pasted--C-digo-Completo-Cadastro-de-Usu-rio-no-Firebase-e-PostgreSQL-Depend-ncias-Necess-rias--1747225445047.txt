// 🚀 Código Completo - Cadastro de Usuário no Firebase e PostgreSQL

// Dependências Necessárias
const express = require('express');
const bodyParser = require('body-parser');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const { initializeApp } = require('firebase-admin/app');
const { getAuth } = require('firebase-admin/auth');
const { Pool } = require('pg');

// Configuração Firebase
initializeApp({
  credential: admin.credential.cert(JSON.parse(process.env.FIREBASE_ADMIN_CREDENTIALS))
});

// Configuração PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

// Configuração do Express
const app = express();
app.use(bodyParser.json());

// Endpoint Webhook do Stripe
app.post('/api/stripe-webhook', async (req, res) => {
  const sig = req.headers['stripe-signature'];

  try {
    const event = stripe.webhooks.constructEvent(
      req.body,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET
    );

    if (event.type === 'checkout.session.completed') {
      const session = event.data.object;
      const email = session.customer_email;

      // Verificar se o usuário já existe no Firebase
      const userRecord = await getAuth().getUserByEmail(email).catch(() => null);

      if (!userRecord) {
        await getAuth().createUser({
          email: email,
          password: Math.random().toString(36).slice(-8) // Senha aleatória
        });
      }

      // Criar ou atualizar o usuário no PostgreSQL
      await pool.query(
        `INSERT INTO users (email, plan, status) VALUES ($1, $2, $3)
         ON CONFLICT (email) DO UPDATE SET plan = $2, status = $3`,
        [email, 'active', session.subscription_id]
      );

      console.log(`✅ Usuário ${email} registrado com sucesso!`);
    }

    res.status(200).send('Webhook recebido com sucesso.');
  } catch (err) {
    console.error('❌ Erro no Webhook:', err);
    res.status(400).send(`Webhook Error: ${err.message}`);
  }
});

// Iniciar o servidor
app.listen(3000, () => {
  console.log('🚀 Servidor rodando na porta 3000');
});
