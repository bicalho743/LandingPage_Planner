// Backend - Sistema de Pagamento e Autenticação (Modo de Teste e Produção)
// Stack: Node.js + Express + Stripe + Firebase + PostgreSQL

const express = require('express');
const cors = require('cors');
const stripe = require('stripe')(process.env.NODE_ENV === 'production' ? process.env.STRIPE_SECRET_KEY : process.env.STRIPE_TEST_SECRET_KEY);
const admin = require('firebase-admin');
const { Pool } = require('pg');

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.raw({ type: 'application/json' }));

// Configurar o PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// Configurar o Firebase
admin.initializeApp({
  credential: admin.credential.applicationDefault()
});

// Rota para iniciar o checkout com Stripe
app.post('/api/checkout', async (req, res) => {
  const { plan } = req.body;
  let priceId = '';

  if (plan === 'mensal') priceId = process.env.STRIPE_PRICE_MONTHLY;
  if (plan === 'anual') priceId = process.env.STRIPE_PRICE_ANNUAL;
  if (plan === 'vitalicio') priceId = process.env.STRIPE_PRICE_LIFETIME;

  try {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      mode: 'subscription',
      line_items: [{ price: priceId, quantity: 1 }],
      subscription_data: { trial_period_days: 7 },
      success_url: `${process.env.FRONTEND_URL}/sucesso`,
      cancel_url: `${process.env.FRONTEND_URL}/cancelado`
    });

    res.json({ url: session.url });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Erro ao iniciar o checkout' });
  }
});

// Rota para webhook do Stripe
app.post('/api/stripe-webhook', async (req, res) => {
  const sig = req.headers['stripe-signature'];
  let event;

  try {
    event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET);
  } catch (err) {
    console.error('Erro de verificação do webhook:', err);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  if (event.type === 'checkout.session.completed') {
    const session = event.data.object;

    const userEmail = session.customer_email;
    await admin.auth().createUser({ email: userEmail, password: 'senhaSegura123!' });

    await pool.query(
      'INSERT INTO users (email, plan, subscription_id) VALUES ($1, $2, $3)',
      [userEmail, session.mode, session.subscription]
    );

    console.log('Pagamento confirmado e usuário registrado:', userEmail);
  }

  res.status(200).end();
});

const PORT = process.env.PORT || 4000;
app.listen(PORT, () => console.log(`Servidor rodando na porta ${PORT}`));
