// index.ts
import express from "express";
import { createServer } from "http";
import { registerRoutes } from "./routes";

const app = express();

// Webhook configurado para aceitar payload RAW
app.use("/api/webhooks/stripe", express.raw({ type: "application/json" }));

// Outros middlewares
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

(async () => {
  const server = await registerRoutes(app);

  let port = process.env.PORT ? parseInt(process.env.PORT) : 5000;

  server.on("error", (err: any) => {
    if (err.code === "EADDRINUSE") {
      console.warn(`üö® Porta ${port} j√° est√° em uso. Tentando outra porta...`);
      port++;
      server.listen(port);
    } else {
      console.error("‚ùå Erro ao iniciar o servidor:", err);
    }
  });

  server.listen(port, "0.0.0.0", () => {
    console.log(`‚úÖ Servidor rodando na porta ${port}`);
  });
})();

// routes.ts
import type { Express, Request, Response } from "express";
import { createFirebaseUser, generatePasswordResetLink } from "./firebase";
import Stripe from "stripe";
import nodemailer from "nodemailer";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, { apiVersion: "2022-11-15" });

export async function registerRoutes(app: Express) {
  app.post("/api/webhooks/stripe", express.raw({ type: "application/json" }), async (req: Request, res: Response) => {
    const sig = req.headers["stripe-signature"] as string;
    const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET;

    try {
      const event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret!);
      console.log("‚úÖ Webhook Recebido:", event.type);

      if (event.type === "checkout.session.completed") {
        const session = event.data.object as any;
        const userEmail = session.customer_email;
        console.log("‚úÖ Pagamento confirmado:", session);

        if (userEmail) {
          console.log("‚úÖ Criando usu√°rio no Firebase para:", userEmail);
          await createFirebaseUser(userEmail, 'senhaSegura123!');

          // Envio de email com link de redefini√ß√£o de senha
          const resetLink = await generatePasswordResetLink(userEmail);
          await sendWelcomeEmail(userEmail, resetLink);
        }
      }

      res.status(200).json({ received: true });
    } catch (error: any) {
      console.error("‚ùå Erro no webhook:", error);
      res.status(400).send(`Webhook Error: ${error.message}`);
    }
  });
}

async function sendWelcomeEmail(email: string, resetLink: string) {
  const transporter = nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 587,
    secure: false,
    auth: {
      user: process.env.SMTP_USER,
      pass: process.env.SMTP_PASS,
    },
  });

  await transporter.sendMail({
    from: 'seuemail@seudominio.com',
    to: email,
    subject: "Bem-vindo ao PlannerPro Organizer",
    text: `Ol√°,\n\nObrigado por se inscrever! Use o link abaixo para definir sua senha:\n\n${resetLink}\n\nSe voc√™ n√£o realizou essa inscri√ß√£o, por favor ignore este email.`,
  });

  console.log("‚úÖ E-mail de boas-vindas enviado para:", email);
}
