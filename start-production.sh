#!/bin/bash

# Script para iniciar o PlannerPro em produ√ß√£o

# Configura√ß√£o de ambiente
export NODE_ENV=production

# Verifica se o build existe
if [ ! -f "dist/index.js" ]; then
  echo "‚ùå Erro: Build n√£o encontrado. Execute o script deploy.sh primeiro."
  echo "   Comando: ./deploy.sh"
  exit 1
fi

# Configura√ß√£o de porta (opcional)
if [ -n "$PORT" ]; then
  echo "üîå Usando porta especificada: $PORT"
  export PORT=$PORT
else
  echo "üîå Usando porta padr√£o"
fi

# Verifica√ß√£o de vari√°veis de ambiente
echo "‚è≥ Verificando configura√ß√£o de ambiente..."
if ! node verificar-env.js; then
  echo "‚ö†Ô∏è Algumas vari√°veis de ambiente n√£o est√£o configuradas corretamente."
  echo "   Confirmar que deseja continuar? (s/N)"
  read resp
  if [ "$resp" != "s" ] && [ "$resp" != "S" ]; then
    echo "Opera√ß√£o cancelada."
    exit 1
  fi
fi

# Script para executar migra√ß√µes seguras de produ√ß√£o
echo "‚è≥ Executando migra√ß√µes seguras do banco de dados para produ√ß√£o..."
cat > migrate-production.js << EOF
import { runProductionMigration } from './dist/production-migration.js';

async function main() {
  const success = await runProductionMigration();
  if (!success) {
    console.error('‚ùå Falha ao executar migra√ß√µes de produ√ß√£o');
    process.exit(1);
  }
}

main().catch(err => {
  console.error('‚ùå Erro:', err);
  process.exit(1);
});
EOF

NODE_ENV=production node --input-type=module migrate-production.js || {
  echo "‚ö†Ô∏è Houve um problema na migra√ß√£o do banco de dados."
  echo "   Confirmar que deseja continuar? (s/N)"
  read resp
  if [ "$resp" != "s" ] && [ "$resp" != "S" ]; then
    echo "Opera√ß√£o cancelada."
    exit 1
  fi
}

# Inicia o servidor de produ√ß√£o
echo "üöÄ Iniciando o servidor em modo de produ√ß√£o..."
node dist/index.js