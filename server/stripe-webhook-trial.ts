import { storage } from './storage';
import { firebaseAuth } from './firebase';
import Stripe from 'stripe';
import { addContactToBrevo, sendTransactionalEmail } from './brevo';

// Inicializando o Stripe
const isProduction = process.env.NODE_ENV === 'production';
const stripeKey = isProduction 
  ? process.env.STRIPE_SECRET_KEY 
  : (process.env.STRIPE_TEST_SECRET_KEY || process.env.STRIPE_SECRET_KEY);

if (!stripeKey) {
  throw new Error('STRIPE_SECRET_KEY n√£o configurado');
}

const stripe = new Stripe(stripeKey);

// Fun√ß√£o para processar checkout com trial - cria o usu√°rio no Firebase imediatamente
export async function handleTrialCheckoutCompleted(session: Stripe.Checkout.Session) {
  console.log(`‚è≥ Processando checkout com trial: ${session.id}`);
  
  if (!session.customer_email) {
    console.log('‚ö†Ô∏è E-mail do cliente n√£o encontrado na sess√£o com trial');
    return;
  }

  const email = session.customer_email;
  const userId = session.client_reference_id ? parseInt(session.client_reference_id) : undefined;
  const planType = session.metadata?.planType || 'mensal';
  
  // Para obter a senha que enviamos nos metadados
  let password;
  
  try {
    // Verificar se o usu√°rio existe no banco e obter a senha armazenada
    const user = await storage.getUserByEmail(email);
    if (!user) {
      console.log(`‚ùå Usu√°rio n√£o encontrado no banco para checkout com trial: ${email}`);
      return;
    }
    
    if (user.senha_hash) {
      // Usar a senha armazenada no campo senha_hash
      password = user.senha_hash;
      console.log('‚úÖ Senha recuperada do banco de dados para trial');
    } else {
      // Verificar se tem no metadata da sess√£o
      const encodedPassword = session.metadata?.senha;
      if (encodedPassword) {
        // Decodificar a senha
        password = Buffer.from(encodedPassword, 'base64').toString();
        console.log('‚úÖ Senha recuperada dos metadados da sess√£o de trial');
      } else {
        // Gerar senha aleat√≥ria caso n√£o tenha sido enviada
        password = Math.random().toString(36).slice(-10) + 
                 Math.random().toString(36).toUpperCase().slice(-2) + 
                 Math.floor(Math.random() * 10) + 
                 '!';
        console.log('‚ö†Ô∏è Senha n√£o encontrada para trial, gerando senha aleat√≥ria');
      }
    }
    
    // 2. Verificar se o usu√°rio j√° existe no Firebase
    let userRecord: any = null;
    let isNewUser = false;
    
    try {
      // Tentar obter pelo email
      userRecord = await firebaseAuth.getUserByEmail(email);
      console.log(`‚ö†Ô∏è Usu√°rio j√° existe no Firebase para trial: ${userRecord.uid}`);
      
      // Atualizar o status do usu√°rio para ativo no banco de dados
      await storage.updateUserStatus(user.id, undefined, 'ativo');
    } catch (firebaseError: any) {
      // Se o usu√°rio n√£o existir no Firebase, criamos um novo
      if (firebaseError.code === 'auth/user-not-found') {
        console.log(`‚úÖ Usu√°rio n√£o encontrado no Firebase para trial, criando novo...`);
        
        try {
          // Criar usu√°rio no Firebase IMEDIATAMENTE para trial
          userRecord = await firebaseAuth.createUser({
            email: email,
            password: password,
            displayName: user.name
          });
          
          isNewUser = true;
          console.log(`‚úÖ Novo usu√°rio criado no Firebase para trial: ${userRecord.uid}`);
          
          // Atualizar o usu√°rio no banco de dados com o firebaseUid e status ativo
          await storage.updateFirebaseUid(user.id, userRecord.uid);
          
          // Atualizar as datas de trial do usu√°rio
          try {
            await storage.updateUserTrialDates(user.id);
            console.log(`‚úÖ Datas de trial atualizadas para usu√°rio: ${user.id}`);
          } catch (trialDatesError) {
            console.error(`‚ùå Erro ao atualizar datas de trial:`, trialDatesError);
          }
          
          // Criar assinatura no banco de dados
          try {
            await storage.createSubscription(user.id, planType);
            console.log(`‚úÖ Assinatura criada para usu√°rio com trial: ${user.id}`);
          } catch (subscriptionError) {
            console.error(`‚ùå Erro ao criar assinatura para trial:`, subscriptionError);
          }
          
          // Enviar email de boas-vindas informando sobre o trial
          try {
            await sendTrialWelcomeEmail(email);
            console.log(`‚úÖ Email de boas-vindas para trial enviado`);
          } catch (emailError) {
            console.error(`‚ùå Erro ao enviar email de trial:`, emailError);
          }
        } catch (createError) {
          console.error(`‚ùå Erro ao criar usu√°rio no Firebase para trial:`, createError);
          throw createError;
        }
      } else {
        console.error(`‚ùå Erro ao verificar usu√°rio no Firebase para trial:`, firebaseError);
        throw firebaseError;
      }
    }
    
    console.log(`‚úÖ Processamento de checkout com trial conclu√≠do para: ${email}`);
  } catch (error) {
    console.error(`‚ùå Erro ao processar checkout com trial:`, error);
    throw error;
  }
}

// Fun√ß√£o para processar falha de pagamento ap√≥s trial
export async function handleTrialEndPaymentFailed(invoice: Stripe.Invoice) {
  console.log(`‚è≥ Processando falha de pagamento ap√≥s trial`);
  
  try {
    // Obter email do cliente
    const customer = invoice.customer as string;
    if (!customer) {
      console.log('‚ö†Ô∏è ID do cliente n√£o encontrado na fatura ap√≥s trial');
      return;
    }
    
    // Obter detalhes do cliente para conseguir o email
    const customerDetails = await stripe.customers.retrieve(customer);
    if (!customerDetails || customerDetails.deleted === true) {
      console.log('‚ö†Ô∏è Cliente n√£o encontrado ou deletado ap√≥s trial');
      return;
    }
    
    const email = customerDetails.email;
    if (!email) {
      console.log('‚ö†Ô∏è Email do cliente n√£o encontrado ap√≥s trial');
      return;
    }
    
    console.log(`‚è≥ Verificando usu√°rio ap√≥s falha no pagamento p√≥s-trial: ${email}`);
    
    // Buscar usu√°rio no banco de dados
    const user = await storage.getUserByEmail(email);
    if (!user) {
      console.log(`‚ö†Ô∏è Usu√°rio n√£o encontrado no banco ap√≥s trial: ${email}`);
      return;
    }
    
    // Usu√°rio encontrado, atualizar status para 'bloqueado'
    await storage.updateUserStatus(user.id, undefined, 'bloqueado');
    console.log(`‚úÖ Usu√°rio ${email} bloqueado ap√≥s falha no pagamento p√≥s-trial`);
    
    // Atualizar status da assinatura
    await storage.updateSubscriptionStatus(user.id, 'unpaid');
    console.log(`‚úÖ Assinatura atualizada para 'unpaid' ap√≥s trial`);
    
    // Opcional: Enviar email informando sobre a falha no pagamento
    try {
      // Implementar envio de email informativo aqui se necess√°rio
      console.log(`‚ö†Ô∏è Email de aviso de falha de pagamento p√≥s-trial seria enviado para: ${email}`);
    } catch (emailError) {
      console.error(`‚ùå Erro ao enviar email p√≥s-trial:`, emailError);
    }
    
  } catch (error) {
    console.error(`‚ùå Erro ao processar falha de pagamento p√≥s-trial:`, error);
    throw error;
  }
}

// Enviar email de boas-vindas espec√≠fico para trial
export async function sendTrialWelcomeEmail(email: string) {
  try {
    console.log(`‚è≥ Enviando email de boas-vindas para trial: ${email}`);
    
    const htmlContent = `
      <h1>Bem-vindo ao PlannerPro Organizer!</h1>
      <p>Seu per√≠odo de trial de 7 dias come√ßou!</p>
      <p>Voc√™ j√° pode acessar todas as funcionalidades premium do PlannerPro durante os pr√≥ximos 7 dias.</p>
      <p>Ap√≥s este per√≠odo, sua forma de pagamento ser√° cobrada automaticamente para continuar seu acesso.</p>
      <p>Se voc√™ n√£o deseja continuar ap√≥s o per√≠odo de trial, voc√™ pode cancelar a qualquer momento atrav√©s do painel.</p>
      <p>Agradecemos por escolher o PlannerPro Organizer!</p>
    `;
    
    const textContent = `
      Bem-vindo ao PlannerPro Organizer!
      
      Seu per√≠odo de trial de 7 dias come√ßou!
      
      Voc√™ j√° pode acessar todas as funcionalidades premium do PlannerPro durante os pr√≥ximos 7 dias.
      Ap√≥s este per√≠odo, sua forma de pagamento ser√° cobrada automaticamente para continuar seu acesso.
      
      Se voc√™ n√£o deseja continuar ap√≥s o per√≠odo de trial, voc√™ pode cancelar a qualquer momento atrav√©s do painel.
      
      Agradecemos por escolher o PlannerPro Organizer!
    `;
    
    // Em produ√ß√£o, aqui entraria o c√≥digo para enviar o email real
    // Em desenvolvimento, apenas simulamos o envio
    if (process.env.NODE_ENV === 'development') {
      console.log('üìß SIMULA√á√ÉO: Email de boas-vindas para trial enviado para:', email);
      console.log('üìß Assunto: Bem-vindo ao PlannerPro - Seu per√≠odo trial de 7 dias come√ßou!');
      return true;
    }
    
    // Envio real do email
    await sendTransactionalEmail(
      email,
      "Bem-vindo ao PlannerPro - Seu per√≠odo trial de 7 dias come√ßou!",
      htmlContent,
      textContent
    );
    
    return true;
  } catch (error) {
    console.error(`‚ùå Erro ao enviar email de boas-vindas para trial:`, error);
    return false;
  }
}